2 => 1/2
3 => 1/3   1/2 - (1/2)/(1/3) = 2/6  (1/2 - 1/6 ; we have different denominator so we multiply first by 3 on both upp and down sides: 3/6-1/6 = 2/6)
5 => 1/5   2/6 - (2/6)/(1/5) =  2/6-2/30   10/30-2/30 = 8/30
so the rate of numbers which aren't divisible by 2/3/5 is 8/30
so from 30 numbers 8 are not divisible by 2/3/5:

    +0  +2  +6  +8 +12 +18 +20 +26
    11, 13, 17, 19, 23, 29, 31, 37,   // +30
    41, 43, 47, 49, 53, 59, 61, 67,  (49 = 7*7)
    71, 73, 77, 79, 83, 89, 91, 97,  (77 = 7*11, 91 = 7*13) 
   101,103,107,109,113,119, 121,127, (119 = 7*17, 121 = 11*11)
   131,133,137,139,143,149, 151,157, (133 = 7*19, 143 = 11*13)
   161,163,167,169,173,179, 181,187, (161 = 7*23, 169 = 13*13, 187 = 11*17)

Algorithm is like this:

for (unsigned int i=11;i<=SquareRoot;i+=30)
{
if ((n % i)==0) return 0;
if ((n % (i+2))==0) return 0;
if ((n % (i+6))==0) return 0;
if ((n % (i+8))==0) return 0;
if ((n % (i+12))==0) return 0;
if ((n % (i+18))==0) return 0;
if ((n % (i+20))==0) return 0;
if ((n % (i+26))==0) return 0;
}



7 => 1/7   rate of numbers which aren't divisible by 2/3/5/7 is 48/210
from here things are getting stincky.

